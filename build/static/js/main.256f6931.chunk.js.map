{"version":3,"sources":["context/alertas/alertaContext.js","context/autenticacion/authContext.js","components/auth/Login.js","components/auth/NuevaCuenta.js","context/proyectos/proyectoContext.js","components/proyectos/NuevoProyecto.js","context/tareas/tareaContext.js","components/proyectos/Proyecto.js","components/proyectos/ListaProyectos.js","components/layout/Sidebar.js","components/layout/Header.js","components/tareas/FormTarea.js","components/tareas/Tarea.js","components/tareas/ListaTareas.js","components/proyectos/Proyectos.js","context/proyectos/proyectoReducer.js","types/index.js","config/axios.js","context/proyectos/proyectoState.js","context/tareas/tareaReducer.js","context/tareas/tareaState.js","context/alertas/alertaReducer.js","context/alertas/alertaState.js","context/autenticacion/authReducer.js","config/token.js","context/autenticacion/authState.js","components/rutas/RutaPrivada.js","App.js","serviceWorker.js","index.js"],"names":["alertaContext","createContext","authContext","Login","props","contextalerta","useContext","alerta","mostrarAlerta","contextauth","mensaje","autenticado","iniciarSesion","useEffect","history","push","msg","categoria","useState","email","password","usuario","guardarUsuario","onChange","e","target","name","value","className","onSubmit","preventDefault","trim","htmlFor","type","id","placeholder","to","NuevaCuenta","registrarUsuario","nombre","confirmar","length","proyectoContext","NuevoProyecto","proyectosContext","formulario","errorformulario","mostrarFormulario","agregarProyecto","mostrarError","proyecto","setProyecto","onClick","tareaContext","Proyecto","proyectoActual","obtenerTareas","_id","ListadoProyectos","proyectos","obtenerProyectos","alertacontext","TransitionGroup","map","CSSTransition","key","timeout","classNames","Sidebar","ListaProyectos","Header","authcontext","obtenerUsuario","cerrarSesion","FormTarea","tareasContext","tareaseleccionada","errortarea","agregarTarea","validarTarea","actualizarTarea","limpiarTarea","guardarTarea","tarea","estado","Tarea","eliminarTarea","guardarTareaActual","cambiarEstado","seleccionarTarea","ListaTareas","eliminarProyecto","tareasproyecto","Proyectos","state","action","payload","filter","clienteAxios","axios","create","baseURL","process","ProyectoState","useReducer","proyectoReducer","dispatch","a","get","resultado","data","post","proyectoId","delete","Provider","children","TareaState","tareaReducer","console","log","params","tareas","put","AlertaState","alertaReducer","setTimeout","localStorage","setItem","token","cargando","removeItem","tokenAuth","defaults","headers","common","AuthState","initialState","getItem","authReducer","datos","respuesta","response","RutaPrivada","Component","component","render","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.256f6931.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst alertaContext = createContext();\n\nexport default alertaContext;","import { createContext } from 'react'\n\nconst authContext = createContext()\n\nexport default authContext;","import React, { useState, useContext, useEffect } from 'react';\nimport { Link } from 'react-router-dom'\nimport alertaContext from '../../context/alertas/alertaContext'\nimport authContext from '../../context/autenticacion/authContext'\n\nconst Login = (props) => {\n  \n    // Extraer valores del alertContext\n    const contextalerta = useContext(alertaContext);\n    const { alerta, mostrarAlerta } = contextalerta\n    \n    // Extraer valores del authContext\n    const contextauth = useContext(authContext);\n    const { mensaje, autenticado, iniciarSesion } = contextauth\n    \n     // Si el usuario o password no existe\n     useEffect(() => {\n      if(autenticado) {\n          props.history.push('/proyectos')\n      }\n      if(mensaje) {\n          mostrarAlerta(mensaje.msg, mensaje.categoria)\n      }\n      // eslint-disable-next-line\n  }, [mensaje, autenticado, props.history])\n    \n    // State para iniciar sesión\n    const [usuario, guardarUsuario] = useState({\n        email: '',\n        password: ''\n    })\n    \n    // extraer de usuario\n    const { email, password } = usuario;\n    \n    const onChange = e => {\n        guardarUsuario( {\n            ...usuario,\n            [e.target.name] : e.target.value\n        })\n    }  \n  \n    // Cuando se inicia sesión\n    const onSubmit = e => {\n      e.preventDefault();\n      \n      // Validación sin campos vacios\n      if(email.trim() === '' || password.trim() === ''){\n          mostrarAlerta('Todos los campos requeridos', 'alerta-error')\n          return\n      }\n      // Pasarlo al action\n      iniciarSesion({\n          email,\n          password\n      })\n    }\n    \n    return (  \n      <div className='form-usuario'>\n          { alerta ? ( <div className={`alerta ${alerta.categoria}`}>{alerta.msg}</div> ) : null}\n          <div className='contenedor-form sombra-dark'>\n              <h1>Iniciar sesión</h1>\n              \n              <form\n                  onSubmit={onSubmit}\n              >\n                  <div className='campo-form'>\n                      <label htmlFor='email'>Email</label>\n                      <input\n                          type='email'\n                          id='email'\n                          name='email'\n                          placeholder='Tu email'\n                          value={email}\n                          onChange={onChange}\n                      />\n                  </div>\n                  <div className='campo-form'>\n                      <label htmlFor='password'>Password</label>\n                      <input\n                          type='password'\n                          id='password'\n                          name='password'\n                          placeholder='Tu password'\n                          value={password}\n                          onChange={onChange}\n                      />\n                  </div>\n                  <div className='campo-form'>\n                      <input \n                          type='submit'\n                          className='btn btn-primario btn-block'\n                          value='Iniciar sesión'\n                      />\n                  </div>\n              </form>\n              \n              <Link to={'/nueva-cuenta'} className='enlace-cuenta'>\n                  Regístrate\n              </Link>\n          </div>\n      </div>\n    );\n}\n \nexport default Login;","import React, { useState, useContext, useEffect } from 'react';\nimport { Link } from 'react-router-dom'\nimport alertaContext from '../../context/alertas/alertaContext'\nimport authContext from '../../context/autenticacion/authContext'\n\nconst NuevaCuenta = (props) => {\n  \n    // Extraer valores del alertContext\n    const contextalerta = useContext(alertaContext);\n    const { alerta, mostrarAlerta } = contextalerta\n    \n    // Extraer valores del authContext\n    const contextauth = useContext(authContext);\n    const { mensaje, autenticado, registrarUsuario } = contextauth\n    \n    // Si el usuario está registrado/autenticado\n    useEffect(() => {\n        if(autenticado) {\n            props.history.push('/proyectos')\n        }\n        if(mensaje) {\n            mostrarAlerta(mensaje.msg, mensaje.categoria)\n        }\n        // eslint-disable-next-line\n    }, [mensaje, autenticado, props.history])\n    \n    // State para iniciar sesión\n    const [usuario, guardarUsuario] = useState({\n        nombre: '',\n        email: '',\n        password: '',\n        confirmar: ''\n    })\n    \n    // extraer de usuario\n    const { nombre, email, password, confirmar } = usuario;\n    \n    const onChange = e => {\n        guardarUsuario( {\n            ...usuario,\n            [e.target.name] : e.target.value\n        })\n    }  \n  \n    // Cuando se inicia sesión\n    const onSubmit = e => {\n        \n        e.preventDefault();\n        \n        // Validación campos rellenos\n        if ( nombre.trim() === '' || email.trim() === '' || password.trim() === '' || confirmar.trim() === '' ) {\n            mostrarAlerta('Todos los campos requeridos', 'alerta-error')\n            return\n        }\n        // Password minimo 6 caracteres\n        if ( password.length < 6 ) {\n            mostrarAlerta('Password mínimo 6 caracteres', 'alerta-error')\n            return\n        }\n        // Passwords iguales\n        if ( password !== confirmar) {\n            mostrarAlerta('Password no coincide', 'alerta-error')\n            return\n        }\n        // Pasarlo al action\n        registrarUsuario({\n            nombre,\n            email,\n            password\n        })\n      \n    }\n    \n    return (  \n      <div className='form-usuario'>\n          { alerta ? ( <div className={`alerta ${alerta.categoria}`}>{alerta.msg}</div> ) : null}\n          <div className='contenedor-form sombra-dark'>\n              <h1>Obtener una cuenta</h1>\n              \n              <form\n                  onSubmit={onSubmit}\n              >\n                  <div className='campo-form'>\n                      <label htmlFor='nombre'>Nombre</label>\n                      <input\n                          type='text'\n                          id='nombre'\n                          name='nombre'\n                          placeholder='Tu nombre'\n                          value={nombre}\n                          onChange={onChange}\n                      />\n                  </div>\n                  <div className='campo-form'>\n                      <label htmlFor='email'>Email</label>\n                      <input\n                          type='email'\n                          id='email'\n                          name='email'\n                          placeholder='Tu email'\n                          value={email}\n                          onChange={onChange}\n                      />\n                  </div>\n                  <div className='campo-form'>\n                      <label htmlFor='password'>Password</label>\n                      <input\n                          type='password'\n                          id='password'\n                          name='password'\n                          placeholder='Tu password'\n                          value={password}\n                          onChange={onChange}\n                      />\n                  </div>\n                  <div className='campo-form'>\n                      <label htmlFor='confirmar'>Confirmar password</label>\n                      <input\n                          type='password'\n                          id='confirmar'\n                          name='confirmar'\n                          placeholder='Repite tu password'\n                          value={confirmar}\n                          onChange={onChange}\n                      />\n                  </div>\n                  <div className='campo-form'>\n                      <input \n                          type='submit'\n                          className='btn btn-primario btn-block'\n                          value='Registrar'\n                      />\n                  </div>\n              </form>\n              \n              <Link to={'/'} className='enlace-cuenta'>\n                  Inicar sesión\n              </Link>\n          </div>\n      </div>\n    );\n}\n \nexport default NuevaCuenta;","import { createContext } from 'react';\n\nconst proyectoContext = createContext()\n\nexport default proyectoContext;","import React, { Fragment, useState, useContext } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext'\n\nconst NuevoProyecto = () => {\n  \n      // Obtener el state del formulario\n      const proyectosContext = useContext(proyectoContext)\n      // extraemos del context, mediante el proyectoContext.provider\n      const { formulario, errorformulario, mostrarFormulario, agregarProyecto, mostrarError } = proyectosContext\n  \n      // State para Proyecto\n      const [proyecto, setProyecto] = useState({\n          nombre: ''\n      })\n      // Leer contenido del input nuevo proyecto\n      const onChangeProyecto = e => {\n          setProyecto({\n            ...proyecto,\n            [e.target.name] : e.target.value\n          })\n      }\n      \n      // Extraer nombre del proyecto\n      const { nombre } = proyecto;\n      \n      // Al enviar proyecto\n      const onSubmitProyecto = e => {\n          e.preventDefault();\n          // Validar\n          if(nombre === ''){\n            mostrarError()\n            return;\n          }\n          // Agregar al state\n          agregarProyecto(proyecto);\n          // Reiniciar el form\n          setProyecto({\n              nombre: ''\n          })\n      }\n      \n      return (  \n          <Fragment>\n              <button\n                  type='button'\n                  className='btn btn-block btn-primario'\n                  onClick={()=> mostrarFormulario()}\n              >\n              Nuevo Proyecto  \n              </button>\n              \n              { formulario\n                ? \n                    (\n                        <form\n                        className='formulario-nuevo-proyecto'\n                        onSubmit={onSubmitProyecto}\n                        >\n                          <input\n                              type='text'\n                              className='input-text'\n                              placeholder='Nombre proyecto'\n                              name='nombre'\n                              value={nombre}\n                              onChange={onChangeProyecto}\n                          />\n                          <input\n                              type='submit'\n                              className='btn btn-block btn-primario'\n                              value='Agregar proyecto'\n                          />\n                        </form>  \n                    )\n                : null\n              }\n              \n              { errorformulario \n                  ? <p className='mensaje error'>Nombre del proyecto requerido</p>\n                  : null\n              }\n              \n          </Fragment>\n        \n      );\n}\n \nexport default NuevoProyecto;","import { createContext } from 'react';\n\nconst tareaContext = createContext()\n\nexport default tareaContext;","import React, { useContext } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext'\nimport tareaContext from '../../context/tareas/tareaContext'\n\nconst Proyecto = ({proyecto}) => {\n  \n      // Obtener el state de proyectos\n      const proyectosContext = useContext(proyectoContext)\n      const { proyectoActual } = proyectosContext // extraemos del context, mediante el proyectoContext.provider\n      \n      // obtener la fn del context de tareas\n      const tareasContext = useContext(tareaContext)\n      const { obtenerTareas } = tareasContext\n      \n      // función para agregar el proyecto actual\n      const seleccionarProyecto = id => {\n          proyectoActual(id) // fijar proyecto actual\n          obtenerTareas(id)  // filtrar tareas del proyecto actual\n      }\n    \n      return (  \n          <li>\n              <button\n                  type='button'\n                  className='btn btn-blank btn-block'\n                  onClick={() => seleccionarProyecto(proyecto._id)}\n              >{proyecto.nombre}</button>\n          </li>\n      );\n}\n \nexport default Proyecto;","import React, { useContext, useEffect } from 'react';\nimport Proyecto from './Proyecto'\nimport proyectoContext from '../../context/proyectos/proyectoContext'\nimport alertaContext from '../../context/alertas/alertaContext'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\n\n\nconst ListadoProyectos = () => {\n  \n    // extraer proyectos del stateInicial y extraemos datos del proyectosContext\n    const proyectosContext = useContext(proyectoContext)\n    const { mensaje, proyectos, obtenerProyectos } = proyectosContext\n    \n    // extraemos alertaContext\n    const alertacontext = useContext(alertaContext)\n    const { alerta, mostrarAlerta } = alertacontext\n    \n    // Obtener proyectos cuando carga el componente\n    useEffect(() => {\n      // si hay un error, mostramos alerta\n      if(mensaje) {\n        mostrarAlerta(mensaje.msg, mensaje.categoria)\n      }\n      obtenerProyectos()\n      // eslint-disable-next-line\n    }, [mensaje])\n    \n    // Revisar si proyectos tiene contenido\n    if(proyectos.length === 0) return <p className=\"mensaje\">No tienes ningún proyecto, <br/>¡Crea uno ahora!</p>;\n    \n    \n    return (  \n        <ul className='listado-proyectos'>\n            \n            { alerta ? ( <div className={`alerta ${alerta.categoria}`}>{alerta.msg}</div> ) : null}\n            \n            <TransitionGroup>\n                {proyectos.map(proyecto => (\n                    <CSSTransition\n                        key={proyecto._id}\n                        timeout={800}\n                        classNames='proyecto'\n                    >\n                        <Proyecto\n                            proyecto={proyecto}\n                        />\n                      \n                    </CSSTransition>\n                ))}\n            </TransitionGroup>\n            \n        </ul>\n    );\n}\n \nexport default ListadoProyectos;","import React from 'react';\nimport NuevoProyecto from '../proyectos/NuevoProyecto'\nimport ListaProyectos from '../proyectos/ListaProyectos'\n\nconst Sidebar = () => {\n  return (  \n      <aside>\n          <h1>MP<span>tasks</span></h1>\n          \n          <NuevoProyecto/>\n          \n          <div className='proyectos'>\n              <h2>Tus proyectos</h2>\n          </div>\n          <ListaProyectos/>\n      </aside>\n  );\n}\n \nexport default Sidebar;","import React, { useContext, useEffect} from 'react';\nimport authContext from '../../context/autenticacion/authContext'\n\n\nconst Header = () => {\n  \n  // extraer la información de autentificación\n  const authcontext = useContext(authContext)\n  const { usuario, obtenerUsuario, cerrarSesion } = authcontext\n  \n  useEffect(() => {\n    obtenerUsuario()\n    // eslint-disable-next-line\n  }, [])\n  \n  return (  \n      <header className='app-header'>\n          {usuario ? <p className='nombre-usuario'>Hola <span>{usuario.nombre}</span></p> : null }\n          \n          <nav className='nav-principal'>\n              <button \n                  className='btn btn-blank cerrar-sesion' \n                  onClick={() => cerrarSesion()}\n              >Cerrar sesión</button>\n          </nav>\n      </header>\n  );\n}\n \nexport default Header;","import React, { useContext, useState, useEffect } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext'\nimport tareaContext from '../../context/tareas/tareaContext'\n\nconst FormTarea = () => {\n  \n      // STATE de proyectos\n      const proyectosContext = useContext(proyectoContext)\n      const { proyecto } = proyectosContext\n      \n      // obtener la fn del context de tareas\n      const tareasContext = useContext(tareaContext)\n      const { tareaseleccionada, errortarea, agregarTarea, validarTarea, obtenerTareas, actualizarTarea, limpiarTarea } = tareasContext\n      \n      // Effect que detecta tarea seleccionada\n      useEffect(() => {\n          if(tareaseleccionada !== null) {\n            guardarTarea(tareaseleccionada)\n          } else {\n            guardarTarea({\n              nombre: ''\n            })\n          }\n          \n      }, [tareaseleccionada])\n      \n      // STATE del formulario\n      const [tarea, guardarTarea] = useState({\n          nombre: ''\n      })\n      // extraer nombre de la tarea\n      const { nombre } = tarea;\n      \n      // Si no hay ningún proyecto seleccionado\n      if(!proyecto) return null;\n        \n      // Array destructuring para extraer proyecto actual\n      const [ proyectoActual ] = proyecto;\n      \n      // Leer los valores del formulario\n      const handleChange = e => {\n          guardarTarea({\n              ...tarea,\n              [e.target.name] : e.target.value\n          })\n      }\n      \n      const onSubmit = e => {\n          e.preventDefault();\n          // Validar\n          if(nombre.trim() === ''){\n            validarTarea()\n            return\n          }\n          \n          // ¿Es edición o nueva tarea?\n          if(tareaseleccionada === null) {\n              // Agregar la nueva tarea al state.tareas, en su proyecto y con estado \"incompleta\"\n              tarea.proyecto = proyectoActual._id\n              tarea.estado = false\n              agregarTarea(tarea)\n          } else {\n            // editar tarea existente\n            actualizarTarea(tarea)\n            // elimina la tarea seleccionada\n            limpiarTarea() \n          }\n          // Obtener y filtrar tareas del proyectoActual\n          obtenerTareas(proyectoActual.id)\n          \n          // Reiniciar el form\n          guardarTarea({\n              nombre: ''\n          })\n      }\n      \n      return (  \n          <div className='formulario'>\n              <form\n                  onSubmit={onSubmit}\n              >\n                  <div className='contenedor-input'>\n                      <input\n                          type='text'\n                          className='input-text'\n                          placeholder='Nombre tarea...'\n                          name='nombre'\n                          value={nombre}\n                          onChange={handleChange}\n                      />\n                  </div>\n                  <div className='contenedor-input'>\n                      <input\n                          type='submit'\n                          className='btn btn-primario btn-submit btn-block'\n                          value={tareaseleccionada ? 'Guardar tarea' : 'Agregar tarea'}\n                      />\n                  </div>\n              </form>\n              { errortarea \n                  ? <p className='mensaje error'>Una tarea sin nombre, no es tarea ;)</p>\n                  : null\n              }\n          </div> \n      );\n}\n \nexport default FormTarea;","import React, { useContext } from 'react';\nimport { FiEdit, FiTrash } from \"react-icons/fi\";\nimport proyectoContext from '../../context/proyectos/proyectoContext'\nimport tareaContext from '../../context/tareas/tareaContext'\n\nconst Tarea = ({tarea}) => {\n    \n    // Extraer si un proyecto está activo\n    const proyectocontext = useContext(proyectoContext)\n    const { proyecto } = proyectocontext\n    \n    // obtenemos funciones del tareaContext\n    const tareasContext = useContext(tareaContext)\n    const { eliminarTarea, obtenerTareas, actualizarTarea, guardarTareaActual } = tareasContext\n    \n    // Extraer proyecto actual\n    const [ proyectoActual ] = proyecto\n    \n    // Fn ELIMINAR tarea\n    const eliminar = id => {\n      eliminarTarea(id, proyectoActual._id)\n      obtenerTareas(proyectoActual.id)\n    }\n    \n    // Fn modificar estado tarea\n    const cambiarEstado = tarea => {\n        if(tarea.estado) {\n            tarea.estado = false;\n        } else {\n            tarea.estado = true;\n        }\n        actualizarTarea(tarea)\n    }\n    \n    // Fn EDITAR tarea\n    const seleccionarTarea = tarea => {\n      guardarTareaActual(tarea)\n    }\n    \n    return (  \n        <li className='tarea sombra'>\n            <p>{tarea.nombre}</p>\n            <div className='estado'>\n                { tarea.estado \n                  ?\n                      (\n                          <button\n                              type='button'\n                              className='completo'\n                              onClick={() => cambiarEstado(tarea)}\n                          >\n                            Completada\n                          </button>\n                      )\n                  :\n                      (\n                          <button\n                              type='button'\n                              className='incompleto'\n                              onClick={() => cambiarEstado(tarea)}\n                          >\n                            Pendiente\n                          </button>\n                      )\n                }\n            </div>\n            \n            <div className='acciones'>\n                <button\n                    type='button'\n                    className='btn btn-secundario-outline'\n                    onClick={() => seleccionarTarea(tarea)}\n                ><FiEdit/></button>\n                \n                <button\n                    type='button'\n                    className='btn btn-warning-outline'\n                    onClick={() => eliminar(tarea._id)}\n                ><FiTrash/></button>\n            </div>\n        </li>\n        \n    );\n}\n \nexport default Tarea;","import React, { Fragment, useContext } from 'react';\nimport Tarea from './Tarea'\nimport proyectoContext from '../../context/proyectos/proyectoContext'\nimport tareaContext from '../../context/tareas/tareaContext'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\n\nconst ListaTareas = () => {\n  \n    // Obtener el state de proyects\n    const proyectosContext = useContext(proyectoContext)\n    // extraemos del context, mediante el proyectoContext.provider\n    const { proyecto, eliminarProyecto } = proyectosContext\n    \n    // obtener las tareas del proyecto\n    const tareasContext = useContext(tareaContext)\n    const { tareasproyecto } = tareasContext\n    \n    // Si no hay ningún proyecto seleccionado\n    if(!proyecto) return <h2>Selecciona un proyecto</h2>\n    \n    // Array destructuring para extraer proyecto actual\n    const [ proyectoActual ] = proyecto\n  \n    return (  \n        <Fragment>\n            <h2>Proyecto: {proyectoActual.nombre}</h2>\n            <ul className='listado-tareas'>\n                { tareasproyecto.length === 0\n                  ? ( <li className='tarea'><p>No hay tareas</p></li> )\n                  : \n                  <TransitionGroup>\n                      {tareasproyecto.map(tarea => (\n                          <CSSTransition\n                              key={tarea._id}\n                              timeout={400}\n                              classNames='tarea'\n                          >\n                              <Tarea\n                                  tarea={tarea}\n                              />\n                          </CSSTransition>\n                      ))}  \n                  </TransitionGroup>\n                }\n            </ul>\n            \n            <button\n                type='button'\n                className='btn btn-eliminar'\n                onClick={() => eliminarProyecto(proyectoActual._id)}\n            >Eliminar proyecto &times;</button>\n        </Fragment>\n    );\n}\n \nexport default ListaTareas;","import React, { useContext, useEffect } from 'react';\nimport Sidebar from '../layout/Sidebar'\nimport Header from '../layout/Header'\nimport FormTarea from '../tareas/FormTarea'\nimport ListaTareas from '../tareas/ListaTareas'\nimport authContext from '../../context/autenticacion/authContext'\n\nconst Proyectos = () => {\n  \n  // extraer la información de autentificación\n  const authcontext = useContext(authContext)\n  const { obtenerUsuario } = authcontext\n  \n  useEffect(() => {\n    obtenerUsuario()\n    // eslint-disable-next-line\n  }, [])\n  \n  return (  \n    <div className='contenedor-app'>\n        <Sidebar/>\n        <div className='seccion-principal'>\n            <Header/>\n            <main>\n                <FormTarea/>\n              \n                <div className='contenedor-tareas'>\n                    <ListaTareas/>\n                </div>\n            </main>\n        </div>\n        \n    </div>\n  );\n}\n \nexport default Proyectos;","// El Reducer se encarga de hacer CAMBIOS EN EL STATE\nimport { \n    FORMULARIO_PROYECTO,\n    OBTENER_PROYECTOS,\n    AGREGAR_PROYECTO,\n    PROYECTO_ERROR,\n    VALIDAR_FORMULARIO,\n    PROYECTO_ACTUAL,\n    ELIMINAR_PROYECTO\n} from '../../types'\n\nexport default (state, action) => {\n  switch(action.type) {\n      case FORMULARIO_PROYECTO:\n          return {\n              ...state,\n              formulario: true\n          }\n      case OBTENER_PROYECTOS:\n          return {\n              ...state,\n              proyectos: action.payload\n          }\n      case AGREGAR_PROYECTO:\n          return {\n              ...state,\n              proyectos: [...state.proyectos, action.payload],\n              formulario: false,\n              errorformulario: false\n          }\n      case VALIDAR_FORMULARIO:\n          return {\n              ...state,\n              errorformulario: true\n          }\n      case PROYECTO_ACTUAL:\n          return {\n              ...state,\n              proyecto: state.proyectos.filter( proyecto => proyecto._id === action.payload )\n          }\n      case ELIMINAR_PROYECTO:\n          return {\n              ...state,\n              proyectos: state.proyectos.filter( proyecto => proyecto._id !== action.payload ),\n              proyecto: null\n          }\n      case PROYECTO_ERROR:\n          return {\n              ...state,\n              mensaje: action.payload\n          }\n      \n      default: \n          return state;\n  }\n}","// TYPES DE PROYECTO\nexport const FORMULARIO_PROYECTO = 'FORMULARIO_PROYECTO';\nexport const OBTENER_PROYECTOS = 'OBTENER_PROYECTOS';\nexport const AGREGAR_PROYECTO = 'AGREGAR_PROYECTO';\nexport const VALIDAR_FORMULARIO = 'VALIDAR_FORMULARIO';\nexport const PROYECTO_ACTUAL = 'PROYECTO_ACTUAL';\nexport const ELIMINAR_PROYECTO = 'ELIMINAR_PROYECTO';\nexport const PROYECTO_ERROR = 'PROYECTO_ERROR';\n\n// TYPES DE TAREA\nexport const TAREAS_PROYECTO = 'TAREAS_PROYECTO';\nexport const AGREGAR_TAREA = 'AGREGAR_TAREA';\nexport const VALIDAR_TAREA = 'VALIDAR_TAREA';\nexport const ELIMINAR_TAREA = 'ELIMINAR_TAREA';\nexport const TAREA_ACTUAL = 'TAREA_ACTUAL';\nexport const ACTUALIZAR_TAREA = 'ACTUALIZAR_TAREA';\nexport const LIMPIAR_TAREA = 'LIMPIAR_TAREA';\n\n// TYPES DE ALERTAS\nexport const MOSTRAR_ALERTA = 'MOSTRAR_ALERTA';\nexport const OCULTAR_ALERTA = 'OCULTAR_ALERTA';\n\n// TYPES DE AUTH\nexport const REGISTRO_EXITOSO = 'REGISTRO_EXITOSO';\nexport const REGISTRO_ERROR = 'REGISTRO_ERROR';\nexport const OBTENER_USUARIO= 'OBTENER_USUARIO';\nexport const LOGIN_EXITOSO= 'LOGIN_EXITOSO';\nexport const LOGIN_ERROR= 'LOGIN_ERROR';\nexport const CERRAR_SESION= 'CERRAR_SESION';\n\n\n\n","import axios from 'axios'\n\nconst clienteAxios = axios.create({\n    baseURL: process.env.REACT_APP_BACKEND_URL\n})\n\nexport default clienteAxios;","import React, { useReducer } from 'react';\n\nimport proyectoContext from './proyectoContext'\nimport proyectoReducer from './proyectoReducer'\nimport { \n    FORMULARIO_PROYECTO, \n    OBTENER_PROYECTOS,\n    AGREGAR_PROYECTO,\n    PROYECTO_ERROR,\n    VALIDAR_FORMULARIO,\n    PROYECTO_ACTUAL,\n    ELIMINAR_PROYECTO\n} from '../../types'\n\nimport clienteAxios from '../../config/axios'\n\n\nconst ProyectoState = props => {\n \n    const initialState = {\n        proyectos: [],\n        formulario: false,\n        errorformulario: false,\n        proyecto: null,\n        mensaje: null\n    }\n    \n    // Dispatch para ejecutar las acciones\n    const [state, dispatch] = useReducer(proyectoReducer, initialState)\n    \n    // Funciones para el CRUD\n    const mostrarFormulario = () => {\n        dispatch({\n            type: FORMULARIO_PROYECTO\n        })\n    }\n    \n    // Obtener los proyectos\n    const obtenerProyectos = async () => {\n        try {\n              const resultado =  await clienteAxios.get('/api/proyectos')          \n              dispatch({\n                type: OBTENER_PROYECTOS,\n                payload: resultado.data.proyectos\n              })\n        } catch (error) {\n              const alerta = {\n                  msg: 'Hubo un error',\n                  categoria: 'alerta-error'\n              }\n              dispatch({\n                type: PROYECTO_ERROR,\n                payload: alerta\n              })\n        }\n    }\n    \n    // Agregar nuevo proyecto\n    const agregarProyecto = async proyecto => {\n        try {\n              const resultado = await clienteAxios.post('/api/proyectos', proyecto)\n              //console.log(resultado.data)\n              // Insertar proyecto en el state\n              dispatch({\n                type: AGREGAR_PROYECTO,\n                payload: resultado.data\n              })\n        } catch (error) {\n              const alerta = {\n                  msg: 'Hubo un error',\n                  categoria: 'alerta-error'\n              }\n              dispatch({\n                type: PROYECTO_ERROR,\n                payload: alerta\n              })\n        }\n    }\n    \n    // Validar formulario nuevoProyecto\n    const mostrarError = () => {\n        dispatch({\n            type: VALIDAR_FORMULARIO\n        })\n    }\n    \n    // Selección de proyecto en lista proyectos\n    const proyectoActual = proyectoId => {\n        dispatch({\n            type: PROYECTO_ACTUAL,\n            payload: proyectoId\n        })\n    }\n    \n    // Eliminar proyecto\n    const eliminarProyecto = async proyectoId => {\n        try {\n              await clienteAxios.delete(`/api/proyectos/${proyectoId}`)\n              dispatch({\n                type: ELIMINAR_PROYECTO,\n                payload: proyectoId\n              })\n        } catch (error) {\n              const alerta = {\n                  msg: 'Hubo un error',\n                  categoria: 'alerta-error'\n              }\n              dispatch({\n                type: PROYECTO_ERROR,\n                payload: alerta\n              })\n        }\n    }\n    \n    \n    return (\n        <proyectoContext.Provider\n            value={{\n                proyectos: state.proyectos,\n                formulario: state.formulario,\n                errorformulario: state.errorformulario,\n                proyecto: state.proyecto,\n                mensaje: state.mensaje,\n                mostrarFormulario,\n                obtenerProyectos,\n                agregarProyecto,\n                mostrarError,\n                proyectoActual,\n                eliminarProyecto\n                \n            }}\n        >\n            {props.children}\n        </proyectoContext.Provider>\n    )\n}\n\nexport default ProyectoState;","import { \n    TAREAS_PROYECTO,\n    AGREGAR_TAREA,\n    VALIDAR_TAREA,\n    ELIMINAR_TAREA,\n    TAREA_ACTUAL,\n    ACTUALIZAR_TAREA,\n    LIMPIAR_TAREA \n} from '../../types'\n\nexport default (state , action) => {\n    switch (action.type) {\n        \n      case TAREAS_PROYECTO:\n          return {\n            ...state,\n            tareasproyecto: action.payload\n          }\n      case AGREGAR_TAREA:\n          return {\n            ...state,\n            tareasproyecto: [action.payload, ...state.tareasproyecto], // añadimos la tarea arriba de las actuales\n            errortarea: false\n          }\n      case VALIDAR_TAREA:\n          return {\n            ...state,\n            errortarea: true\n          }\n      case ELIMINAR_TAREA:\n          return {\n            ...state,\n            tareasproyecto: state.tareasproyecto.filter(tarea => tarea._id !== action.payload)\n          }\n      case ACTUALIZAR_TAREA:\n            return {\n                ...state,\n                tareasproyecto: state.tareasproyecto.map(tarea => tarea._id === action.payload._id ? action.payload : tarea )\n            }\n      case TAREA_ACTUAL:\n          return {\n            ...state,\n            tareaseleccionada: action.payload\n          }\n      case LIMPIAR_TAREA:\n          return {\n            ...state,\n            tareaseleccionada: null\n          }\n      default:\n          return state\n    }\n}","import React, { useReducer } from 'react';\nimport tareaContext from './tareaContext'\nimport tareaReducer from './tareaReducer';\n\nimport { \n    TAREAS_PROYECTO,\n    AGREGAR_TAREA,\n    VALIDAR_TAREA,\n    ELIMINAR_TAREA,\n    TAREA_ACTUAL,\n    ACTUALIZAR_TAREA,\n    LIMPIAR_TAREA \n} from '../../types'\nimport clienteAxios from '../../config/axios';\n\nconst TareaState = props => {\n    \n    const initialState = {\n        tareasproyecto: [],\n        errortarea: false,\n        tareaseleccionada: null\n    }\n    \n    // Crear dispatch y el state\n    const [state, dispatch] = useReducer(tareaReducer, initialState)\n    \n    // FUNCIONES\n    \n    // Obtener las tareas de un proyecto\n    const obtenerTareas = async proyecto => {\n\n        console.log(proyecto);\n\n        try {\n            const resultado = await clienteAxios.get('../api/tareas', { params: { proyecto }});\n            console.log(resultado.data.tareas);\n            dispatch({\n                type: TAREAS_PROYECTO,\n                payload: resultado.data.tareas\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    \n    // Agregar una tarea\n    const agregarTarea = async tarea => {\n        try {\n            const resultado = await clienteAxios.post('/api/tareas', tarea)\n            //console.log(resultado.data)\n            dispatch({\n                type: AGREGAR_TAREA,\n                payload: resultado.data.tarea\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    \n    // Valida y muestra error en la tarea\n    const validarTarea = () => {\n        dispatch({\n            type: VALIDAR_TAREA\n        })\n    }\n    \n    // Eliminar tarea por id\n    const eliminarTarea = async (id, proyecto) => {\n        try {\n            await clienteAxios.delete(`/api/tareas/${id}`, { params: { proyecto }})\n            dispatch({\n                type: ELIMINAR_TAREA,\n                payload: id\n            })\n            \n        } catch (error) {\n            \n        }\n    }\n    \n    // Editar tarea\n    const actualizarTarea = async tarea => {\n        try {\n            const resultado = await clienteAxios.put(`/api/tareas/${tarea._id}`, tarea)\n            dispatch({\n                type: ACTUALIZAR_TAREA,\n                payload: resultado.data.tarea\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    \n    // Extraer la tarea para edición\n    const guardarTareaActual = tarea => {\n        dispatch({\n            type: TAREA_ACTUAL,\n            payload: tarea\n        })\n    }\n    \n    // Limpiar la tarea seleccionada\n    const limpiarTarea = () => {\n        dispatch({\n            type: LIMPIAR_TAREA\n        })\n    }\n  \n    return(\n        <tareaContext.Provider\n            value={{\n                tareasproyecto: state.tareasproyecto,\n                errortarea: state.errortarea,\n                tareaseleccionada: state.tareaseleccionada,\n                obtenerTareas,\n                agregarTarea,\n                validarTarea,\n                eliminarTarea,\n                guardarTareaActual,\n                actualizarTarea,\n                limpiarTarea\n            }}\n        >\n          {props.children}\n        </tareaContext.Provider>   \n    )\n}\n\nexport default TareaState;","import { MOSTRAR_ALERTA, OCULTAR_ALERTA } from '../../types'\n\nexport default (state, action) => {\n    switch(action.type) {\n        \n        case MOSTRAR_ALERTA: \n            return {\n                alerta: action.payload\n            }\n        case OCULTAR_ALERTA: \n            return {\n                alerta: null\n            }\n        \n        default:\n            return state\n    }\n}","import React, { useReducer } from 'react'\nimport alertaReducer from '../alertas/alertaReducer'\nimport alertaContext from '../alertas/alertaContext'\nimport {MOSTRAR_ALERTA, OCULTAR_ALERTA} from '../../types'\n\nconst AlertaState = props => {\n  \n    const initialState = {\n        alerta: null\n    }\n    \n    // creamos dispatch y el state\n    const [ state, dispatch ] = useReducer( alertaReducer, initialState )\n    \n    // Funciones\n    const mostrarAlerta = (msg, categoria) => {\n        dispatch({\n            type: MOSTRAR_ALERTA,\n            payload: {\n              msg,\n              categoria\n            }\n        })\n        \n        setTimeout(() => {\n            dispatch({\n              type: OCULTAR_ALERTA\n            })\n        }, 5000);\n    }\n    \n    return (\n        <alertaContext.Provider\n            value={{\n                alerta: state.alerta,\n                mostrarAlerta\n            }}\n        >\n            {props.children}\n        </alertaContext.Provider>\n      \n    )\n    \n}\n\nexport default AlertaState;","import {\n    REGISTRO_EXITOSO,\n    REGISTRO_ERROR,\n    OBTENER_USUARIO,\n    LOGIN_EXITOSO,\n    LOGIN_ERROR,\n    CERRAR_SESION,\n} from '../../types'\n\nexport default (state, action) => {\n    switch(action.type) {\n        \n        case REGISTRO_EXITOSO: \n        case LOGIN_EXITOSO: \n            localStorage.setItem('token', action.payload.token)\n            return {\n              ...state,\n              autenticado: true,\n              mensaje: null,\n              cargando: false\n            } \n        case OBTENER_USUARIO: \n            return {\n              ...state,\n              autenticado: true,\n              cargando: false,\n              usuario: action.payload\n            }\n        case CERRAR_SESION:\n        case REGISTRO_ERROR: \n        case LOGIN_ERROR:\n            localStorage.removeItem('token')\n            return {\n              ...state,\n              token: null,\n              usuario: null,\n              autenticado: null,\n              cargando: false,\n              mensaje: action.payload\n            }\n           \n        \n        default:\n            return state\n    }\n}","import clienteAxios from './axios'\n\nconst tokenAuth = token => {\n      if (token) {\n          clienteAxios.defaults.headers.common['x-auth-token'] = token\n      } else {\n          delete clienteAxios.defaults.headers.common['x-auth-token']\n      }\n}\n\nexport default tokenAuth;","import React, { useReducer } from 'react';\nimport authContext from './authContext'\nimport authReducer from './authReducer'\nimport clienteAxios from '../../config/axios'\nimport tokenAuth from '../../config/token'\n\n// eslint-disable-next-line\nimport {\n  REGISTRO_EXITOSO,\n  REGISTRO_ERROR,\n  OBTENER_USUARIO,\n  LOGIN_EXITOSO,\n  LOGIN_ERROR,\n  CERRAR_SESION\n} from '../../types'\n\nconst AuthState = props => {\n  \n    const initialState = {\n        token: localStorage.getItem('token'),\n        autenticado: null,\n        usuario: null,\n        mensaje: null,\n        cargando: true\n          \n    } \n    \n    const [ state, dispatch ] = useReducer(authReducer, initialState)\n    \n    // FUNCIONES\n    // REGISTRO de usuario\n    const registrarUsuario = async datos => {\n        \n        try {\n              const respuesta = await clienteAxios.post('/api/usuarios', datos)\n              console.log(respuesta.data)\n              \n              dispatch({\n                  type: REGISTRO_EXITOSO,\n                  payload: respuesta.data\n              })\n              \n              // al registrarse OBTENERMOS EL USUARIO\n              obtenerUsuario()\n            \n        } catch (error) {\n              //console.log(error.response.data.msg)\n              const alerta = {\n                  msg: error.response.data.msg,\n                  categoria: 'alerta-error'\n              }\n              dispatch({\n                  type: REGISTRO_ERROR,\n                  payload: alerta              \n              })\n        }\n    }\n    \n    // OBTENER USUARIO autenticado\n    const obtenerUsuario = async () => {\n        // obtenemos el token del localStorage colocado por REGISTRO_EXITOSO\n        const token = localStorage.getItem('token')\n        \n        if(token) {\n            tokenAuth(token)\n        }\n        \n        try {\n              const respuesta = await clienteAxios.get('/api/auth')\n              //console.log(respuesta.data)\n              dispatch({\n                  type: OBTENER_USUARIO,\n                  payload: respuesta.data.usuario\n              })\n            \n        } catch (error) {\n              console.log(error.response)\n              dispatch({\n                  type: LOGIN_ERROR\n              })\n        }      \n    }\n    \n    // INICIO DE SESIÓN\n    const iniciarSesion = async datos => {\n        try {\n              const respuesta = await clienteAxios.post('/api/auth', datos)\n              //console.log(respuesta)\n              dispatch({\n                  type: LOGIN_EXITOSO,\n                  payload: respuesta.data // pasa el token \n              })\n              // al iniciar sesión OBTENERMOS EL USUARIO\n              obtenerUsuario()\n        } catch (error) {\n              console.log(error.response.data.msg)\n              const alerta = {\n                msg: error.response.data.msg,\n                categoria: 'alerta-error'\n              }\n              dispatch({\n                  type: LOGIN_ERROR,\n                  payload: alerta              \n              }) \n        }\n    }\n    \n    // CERRAR SESIÓN\n    const cerrarSesion = () => {\n        dispatch({\n            type: CERRAR_SESION\n        })\n    }\n    \n    \n  \n    return(\n        <authContext.Provider\n            value={{\n                token: state.token,\n                autenticado: state.autenticado,\n                usuario: state.usuario,\n                mensaje: state.mensaje,\n                cargando: state.cargando,\n                registrarUsuario,\n                iniciarSesion,\n                obtenerUsuario,\n                cerrarSesion\n            }}\n        >\n            {props.children}\n        </authContext.Provider>\n    )\n  \n}\n\nexport default AuthState;","import React, { useContext, useEffect } from 'react';\nimport { Route, Redirect } from 'react-router-dom'\nimport authContext from '../../context/autenticacion/authContext'\n\nconst RutaPrivada = ({ component: Component, ...props}) => {\n   \n    const authcontext = useContext(authContext)\n    const { autenticado, cargando, obtenerUsuario } = authcontext\n    // Llamamos a obtenerUsuario para que al recargar no pasa autenticado: null \n    useEffect(() => {\n        obtenerUsuario()\n        // eslint-disable-next-line\n    }, [])\n  \n    return (  \n        <Route { ...props } render={ props => !autenticado && !cargando ? (\n            \n            <Redirect to=\"/\" />\n        \n            ) : (\n          \n            <Component {...props} />\n              \n            ) }\n        \n        />\n    );\n}\n \nexport default RutaPrivada;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport Login from './components/auth/Login'\nimport NuevaCuenta from './components/auth/NuevaCuenta'\nimport Proyectos from './components/proyectos/Proyectos'\n\nimport ProyectoState from './context/proyectos/proyectoState'\nimport TareaState from './context/tareas/tareaState'\nimport AlertaState from './context/alertas/alertaState'\nimport AuthState from './context/autenticacion/authState'\nimport tokenAuth from './config/token'\n// Higher Order Component --> revisar autentificación para proteger componentes\nimport RutaPrivada from './components/rutas/RutaPrivada'\n\n// Revisar si tenemso un TOKEN\nconst token = localStorage.getItem('token')\nif(token) {\n  tokenAuth(token)\n}\n\nfunction App() {\n  \n  return (\n      <ProyectoState>\n          <TareaState>\n              <AlertaState>\n                  <AuthState>\n                      <Router>\n                          <Switch>\n                              <Route exact path='/' component={Login} />\n                              <Route exact path='/nueva-cuenta' component={NuevaCuenta} />\n                              <RutaPrivada exact path='/proyectos' component={Proyectos} />\n                          </Switch>\n                      </Router>\n                  </AuthState>\n              </AlertaState>\n          </TareaState>\n      </ProyectoState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}