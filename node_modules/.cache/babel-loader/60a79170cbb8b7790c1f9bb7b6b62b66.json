{"ast":null,"code":"var _jsxFileName = \"/Users/manuelpolaina/Documents/CURSOS/JUANP/React/MERNtasks/cliente/src/components/tareas/FormTarea.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\nimport tareaContext from '../../context/tareas/tareaContext';\n\nconst FormTarea = () => {\n  // STATE de proyectos\n  const proyectosContext = useContext(proyectoContext);\n  const {\n    proyecto\n  } = proyectosContext; // obtener la fn del context de tareas\n\n  const tareasContext = useContext(tareaContext);\n  const {\n    tareaseleccionada,\n    errortarea,\n    agregarTarea,\n    validarTarea,\n    obtenerTareas,\n    actualizarTarea\n  } = tareasContext; // Effect que detecta tarea seleccionada\n\n  useEffect(() => {\n    if (tareaseleccionada !== null) {\n      setTarea(tareaseleccionada);\n    } else {\n      setTarea({\n        nombre: ''\n      });\n    }\n  }, [tareaseleccionada]); // STATE del formulario\n\n  const [tarea, setTarea] = useState({\n    nombre: ''\n  }); // extraer nombre de la tarea\n\n  const {\n    nombre\n  } = tarea; // Si no hay ningún proyecto seleccionado\n\n  if (!proyecto) return null; // Array destructuring para extraer proyecto actual\n\n  const [poryectoActual] = proyecto; // Leer los valores del formulario\n\n  const handleChange = e => {\n    setTarea({ ...tarea,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const onSubmit = e => {\n    e.preventDefault(); // Validar\n\n    if (nombre.trim() === '') {\n      validarTarea();\n      return;\n    } // ¿Es edición o nueva tarea?\n\n\n    if (tareaseleccionada === null) {\n      // Agregar la nueva tarea al state.tareas, en su proyecto y con estado \"incompleta\"\n      tarea.proyectoId = poryectoActual.id;\n      tarea.estado = false;\n      agregarTarea(tarea);\n    } else {\n      // editar tarea existente\n      actualizarTarea(tarea);\n    } // Obtener y filtrar tareas del proyectoActual\n\n\n    obtenerTareas(poryectoActual.id); // Reiniciar el form\n\n    setTarea({\n      nombre: ''\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formulario\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contenedor-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"input-text\",\n    placeholder: \"Nombre tarea...\",\n    name: \"nombre\",\n    value: nombre,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contenedor-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primario btn-submit btn-block\",\n    value: tareaseleccionada ? 'Editar tarea' : 'Agregar tarea',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 23\n    }\n  }))), errortarea ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mensaje error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }, \"Una tarea sin nombre, no es tarea ;)\") : null);\n};\n\nexport default FormTarea;","map":{"version":3,"sources":["/Users/manuelpolaina/Documents/CURSOS/JUANP/React/MERNtasks/cliente/src/components/tareas/FormTarea.js"],"names":["React","useContext","useState","useEffect","proyectoContext","tareaContext","FormTarea","proyectosContext","proyecto","tareasContext","tareaseleccionada","errortarea","agregarTarea","validarTarea","obtenerTareas","actualizarTarea","setTarea","nombre","tarea","poryectoActual","handleChange","e","target","name","value","onSubmit","preventDefault","trim","proyectoId","id","estado"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,eAAP,MAA4B,yCAA5B;AACA,OAAOC,YAAP,MAAyB,mCAAzB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAElB;AACA,QAAMC,gBAAgB,GAAGN,UAAU,CAACG,eAAD,CAAnC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAeD,gBAArB,CAJkB,CAMlB;;AACA,QAAME,aAAa,GAAGR,UAAU,CAACI,YAAD,CAAhC;AACA,QAAM;AAAEK,IAAAA,iBAAF;AAAqBC,IAAAA,UAArB;AAAiCC,IAAAA,YAAjC;AAA+CC,IAAAA,YAA/C;AAA6DC,IAAAA,aAA7D;AAA4EC,IAAAA;AAA5E,MAAgGN,aAAtG,CARkB,CAUlB;;AACAN,EAAAA,SAAS,CAAC,MAAK;AACX,QAAGO,iBAAiB,KAAK,IAAzB,EAA+B;AAC7BM,MAAAA,QAAQ,CAACN,iBAAD,CAAR;AACD,KAFD,MAEO;AACLM,MAAAA,QAAQ,CAAC;AACPC,QAAAA,MAAM,EAAE;AADD,OAAD,CAAR;AAGD;AAEJ,GATQ,EASN,CAACP,iBAAD,CATM,CAAT,CAXkB,CAsBlB;;AACA,QAAM,CAACQ,KAAD,EAAQF,QAAR,IAAoBd,QAAQ,CAAC;AAC/Be,IAAAA,MAAM,EAAE;AADuB,GAAD,CAAlC,CAvBkB,CA0BlB;;AACA,QAAM;AAAEA,IAAAA;AAAF,MAAaC,KAAnB,CA3BkB,CA6BlB;;AACA,MAAG,CAACV,QAAJ,EAAc,OAAO,IAAP,CA9BI,CAgClB;;AACA,QAAM,CAAEW,cAAF,IAAqBX,QAA3B,CAjCkB,CAmClB;;AACA,QAAMY,YAAY,GAAGC,CAAC,IAAI;AACtBL,IAAAA,QAAQ,CAAC,EACL,GAAGE,KADE;AAEL,OAACG,CAAC,CAACC,MAAF,CAASC,IAAV,GAAkBF,CAAC,CAACC,MAAF,CAASE;AAFtB,KAAD,CAAR;AAIH,GALD;;AAOA,QAAMC,QAAQ,GAAGJ,CAAC,IAAI;AAClBA,IAAAA,CAAC,CAACK,cAAF,GADkB,CAElB;;AACA,QAAGT,MAAM,CAACU,IAAP,OAAkB,EAArB,EAAwB;AACtBd,MAAAA,YAAY;AACZ;AACD,KANiB,CAQlB;;;AACA,QAAGH,iBAAiB,KAAK,IAAzB,EAA8B;AAC1B;AACAQ,MAAAA,KAAK,CAACU,UAAN,GAAmBT,cAAc,CAACU,EAAlC;AACAX,MAAAA,KAAK,CAACY,MAAN,GAAe,KAAf;AACAlB,MAAAA,YAAY,CAACM,KAAD,CAAZ;AACH,KALD,MAKO;AACL;AACAH,MAAAA,eAAe,CAACG,KAAD,CAAf;AACD,KAjBiB,CAkBlB;;;AACAJ,IAAAA,aAAa,CAACK,cAAc,CAACU,EAAhB,CAAb,CAnBkB,CAqBlB;;AACAb,IAAAA,QAAQ,CAAC;AACLC,MAAAA,MAAM,EAAE;AADH,KAAD,CAAR;AAGH,GAzBD;;AA2BA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACI,IAAA,QAAQ,EAAEQ,QADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,SAAS,EAAC,YAFd;AAGI,IAAA,WAAW,EAAC,iBAHhB;AAII,IAAA,IAAI,EAAC,QAJT;AAKI,IAAA,KAAK,EAAER,MALX;AAMI,IAAA,QAAQ,EAAEG,YANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAHJ,eAaI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,SAAS,EAAC,uCAFd;AAGI,IAAA,KAAK,EAAEV,iBAAiB,GAAG,cAAH,GAAoB,eAHhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAbJ,CADJ,EAsBMC,UAAU,gBACN;AAAG,IAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADM,GAEN,IAxBV,CADJ;AA6BL,CAnGD;;AAqGA,eAAeL,SAAf","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext'\nimport tareaContext from '../../context/tareas/tareaContext'\n\nconst FormTarea = () => {\n  \n      // STATE de proyectos\n      const proyectosContext = useContext(proyectoContext)\n      const { proyecto } = proyectosContext\n      \n      // obtener la fn del context de tareas\n      const tareasContext = useContext(tareaContext)\n      const { tareaseleccionada, errortarea, agregarTarea, validarTarea, obtenerTareas, actualizarTarea } = tareasContext\n      \n      // Effect que detecta tarea seleccionada\n      useEffect(()=> {\n          if(tareaseleccionada !== null) {\n            setTarea(tareaseleccionada)\n          } else {\n            setTarea({\n              nombre: ''\n            })\n          }\n          \n      }, [tareaseleccionada])\n      \n      // STATE del formulario\n      const [tarea, setTarea] = useState({\n          nombre: ''\n      })\n      // extraer nombre de la tarea\n      const { nombre } = tarea;\n      \n      // Si no hay ningún proyecto seleccionado\n      if(!proyecto) return null;\n        \n      // Array destructuring para extraer proyecto actual\n      const [ poryectoActual ] = proyecto;\n      \n      // Leer los valores del formulario\n      const handleChange = e => {\n          setTarea({\n              ...tarea,\n              [e.target.name] : e.target.value\n          })\n      }\n      \n      const onSubmit = e => {\n          e.preventDefault();\n          // Validar\n          if(nombre.trim() === ''){\n            validarTarea()\n            return\n          }\n          \n          // ¿Es edición o nueva tarea?\n          if(tareaseleccionada === null){\n              // Agregar la nueva tarea al state.tareas, en su proyecto y con estado \"incompleta\"\n              tarea.proyectoId = poryectoActual.id\n              tarea.estado = false\n              agregarTarea(tarea)\n          } else {\n            // editar tarea existente\n            actualizarTarea(tarea) \n          }\n          // Obtener y filtrar tareas del proyectoActual\n          obtenerTareas(poryectoActual.id)\n          \n          // Reiniciar el form\n          setTarea({\n              nombre: ''\n          })\n      }\n      \n      return (  \n          <div className='formulario'>\n              <form\n                  onSubmit={onSubmit}\n              >\n                  <div className='contenedor-input'>\n                      <input\n                          type='text'\n                          className='input-text'\n                          placeholder='Nombre tarea...'\n                          name='nombre'\n                          value={nombre}\n                          onChange={handleChange}\n                      />\n                  </div>\n                  <div className='contenedor-input'>\n                      <input\n                          type='submit'\n                          className='btn btn-primario btn-submit btn-block'\n                          value={tareaseleccionada ? 'Editar tarea' : 'Agregar tarea'}\n                      />\n                  </div>\n              </form>\n              { errortarea \n                  ? <p className='mensaje error'>Una tarea sin nombre, no es tarea ;)</p>\n                  : null\n              }\n          </div> \n      );\n}\n \nexport default FormTarea;"]},"metadata":{},"sourceType":"module"}